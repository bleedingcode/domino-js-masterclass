swagger: '2.0'
info:
  description: >-
    This is the contract for our ToDo app. Data will be stored in Domino. The UI
    will be React
  version: 1.0.0
  title: Swagger Domino/React ToDos
  contact:
    name: Paul Withers
    email: watsonwork.me/pwithers@intec.co.uk
    url: 'http://www.intec.co.uk'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:8081'
basePath: /todoApp
tags:
  - name: store
    description: CRUD for ToDos NSF(s)
  - name: user
    description: Operations about users
  - name: todo
    description: Everything about your ToDos
  - name: debug
    description: Debug only operations. Additional authorisation required
schemes:
  - http
paths:
  /v1/stores:
    get:
      tags:
        - store
      summary: Get all stores the user has access to
      description: ''
      operationId: getStores
      consumes:
        - application/json; utf-8
      produces:
        - application/json; utf-8
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Store'
        '401':
          description: Unauthenticated
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
  /v1/stores/todos/markOverdue:
    get:
      tags:
        - store
        - todo
      summary: Mark any todos that are due as "Overdue" status - OUTSTANDING
      description: ''
      operationId: markOverdue
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '202':
          description: accepted for processing
        '401':
          description: unauthenticated
      security:
        - domino_auth: []
          sched_auth: []
        - application_auth: []
          sched_auth: []
  /v1/store:
    post:
      tags:
        - store
      summary: Add a new ToDo NSF instance
      description: ''
      operationId: createStore
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: >-
            Store object that should be created. For personal stores, "name"
            will be ignored and auto-generated based on username. For Domino
            usernames "/" will be replaced with "_".
          required: true
          schema:
            $ref: '#/definitions/Store'
      responses:
        '400':
          description: Invalid input
        '401':
          description: Unauthenticated
        '409':
          description: Conflict in name
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
  '/v1/store/{store}/updateTitle':
    patch:
      tags:
        - store
      description: Change the title of a ToDo store
      operationId: changeTitle
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: store
          description: store id or name
          in: path
          required: true
          type: string
        - in: header
          name: title
          description: New title for the store
          required: true
          type: string
      responses:
        '200':
          $ref: '#/definitions/Store'
        '400':
          description: Invalid store name or id supplied
        '401':
          description: Unauthenticated
        '405':
          description: Validation exception
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
    get:
      tags:
        - store
      description: Retrieve information about a ToDo store
      operationId: getStoreInfo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: store
          description: store id or name
          in: path
          required: true
          type: string
      responses:
        '200':
          $ref: '#/definitions/Store'
        '400':
          description: Invalid store name or id supplied
        '401':
          description: Unauthenticated
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
  '/v1/store/{store}/access':
    get:
      tags:
        - store
        - user
      description: query access level for the current user for the relevant store
      operationId: queryAccess
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: store
          description: store id or name
          in: path
          required: true
          type: string
      responses:
        '200':
          $ref: '#/definitions/User'
        '400':
          description: Invalid store name or id supplied
        '401':
          description: Unauthenticated
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
    put:
      tags:
        - store
        - user
      description: >-
        add or update access for users for the relevant store. This can only be
        done by an Admin for the store.
      operationId: updateAccess
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: store
          description: store id or name
          in: path
          required: true
          type: string
        - name: body
          in: body
          description: users to update access for
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        '200':
          description: boolean success
          schema:
            type: boolean
            description: success or failure
        '400':
          description: Invalid store name or id supplied
        '401':
          description: Unauthenticated
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
  '/v1/todos/{store}/findByStatus':
    get:
      tags:
        - todo
      description: >-
        get all todos in a store for a particular status, sorted by due date
        ascending. If no status is passed, default will be New
      operationId: getToDosByStatus
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: store
          description: store id or name
          in: path
          required: true
          type: string
        - name: status
          description: status
          in: query
          required: false
          type: string
          enum:
            - new
            - incomplete
            - complete
            - reassigned
      responses:
        '200':
          description: todos for that status
          schema:
            type: array
            description: array of todos
            items:
              $ref: '#/definitions/ToDo'
        '400':
          description: Invalid store name or id supplied
        '401':
          description: Unauthenticated
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
  '/v1/todos/{store}/findByAsigneeAndStatus':
    get:
      tags:
        - todo
      description: >-
        get all todos in a store assigned to a particular user for a particular
        status, sorted by due date ascending. If no username or status is
        passed, current user and New status
      operationId: getToDosByAssigneeAndStatus
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: store
          description: store id or name
          in: path
          required: true
          type: string
        - name: username
          description: username
          in: query
          required: false
          type: string
        - name: status
          description: status
          in: query
          required: false
          type: string
          enum:
            - new
            - incomplete
            - complete
            - reassigned
      responses:
        '200':
          description: todos assigned to the user for the status
          schema:
            type: array
            description: array of todos
            items:
              $ref: '#/definitions/ToDo'
        '400':
          description: Invalid store name or id supplied
        '401':
          description: Unauthenticated
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
  '/v1/todos/{store}/findByPriorityAndStatus':
    get:
      tags:
        - todo
      description: >-
        get all todos in a store for a particular priority and status, sorted by
        due date ascending. If no priority and status are passed, high and New
      operationId: getToDosByPriorityAndStatus
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: store
          description: store id or name
          in: path
          required: true
          type: string
        - name: priority
          description: priority
          in: query
          required: false
          type: string
          enum:
            - low
            - medium
            - high
        - name: status
          description: status
          in: query
          required: false
          type: string
          enum:
            - new
            - incomplete
            - complete
            - reassigned
      responses:
        '200':
          description: todos for the priority and status
          schema:
            type: array
            description: array of todos
            items:
              $ref: '#/definitions/ToDo'
        '400':
          description: Invalid store name or id supplied
        '401':
          description: Unauthenticated
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
  '/v1/todos/{store}/findByDate':
    get:
      tags:
        - todo
      description: >-
        get all todos in a store after or between dates. If no start date is
        passed, today's date will be used. If no end date is passed, today + 1
        year will be used.
      operationId: getToDosByDate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: store
          description: store id or name
          in: path
          required: true
          type: string
        - name: startDate
          description: start date in RFC 3339 section 5.6 format 2018-03-19
          in: query
          required: true
          type: string
          format: date
        - name: endDate
          description: start date in RFC 3339 section 5.6 format 2018-03-19
          in: query
          required: false
          type: string
          format: date
      responses:
        '200':
          description: todos between the dates
          schema:
            type: array
            description: array of todos
            items:
              $ref: '#/definitions/ToDo'
        '400':
          description: Invalid store name or id supplied
        '401':
          description: Unauthenticated
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
  '/v1/todo/{key}':
    get:
      tags:
        - todo
      description: add a todo to the store
      operationId: getToDo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: key
          description: metaversalId of the ToDo
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Returned ToDo
          schema:
            $ref: '#/definitions/ToDo'
        '400':
          description: Invalid id supplied
        '401':
          description: Not authorised
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
    post:
      tags:
        - todo
      description: add a todo to the store
      operationId: addToDo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: key
          description: store id or name in which to post the ToDo
          in: path
          required: true
          type: string
        - name: body
          in: body
          description: ToDo to post to the store
          required: true
          schema:
            $ref: '#/definitions/ToDo'
      responses:
        '200':
          description: Returned ToDo
          schema:
            $ref: '#/definitions/ToDo'
        '400':
          description: Invalid id supplied
        '401':
          description: Not authorised
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
    put:
      tags:
        - todo
      description: update a ToDo in the store
      operationId: updateToDo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: key
          description: metaversalId of the ToDo
          in: path
          required: true
          type: string
        - name: body
          in: body
          description: ToDo to update in the store
          required: true
          schema:
            $ref: '#/definitions/ToDo'
      responses:
        '200':
          description: Returned ToDo
          schema:
            $ref: '#/definitions/ToDo'
        '400':
          description: Invalid id supplied
        '401':
          description: Not authorised
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
    delete:
      tags:
        - todo
      description: delete a ToDo from the store
      operationId: deleteToDo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: key
          description: metaversalId of the ToDo
          in: path
          required: true
          type: string
      responses:
        '200':
          description: boolean success
          schema:
            type: boolean
            description: boolean success or failure
        '400':
          description: Invalid id supplied
        '401':
          description: Not authorised
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
  '/v1/todo/{toDoId}/reassign':
    put:
      tags:
        - todo
      description: 'Reassign a todo to another user, changes status to reassigned'
      operationId: reassignToDo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: toDoId
          description: metaversalId of the ToDo
          in: path
          required: true
          type: string
        - name: body
          in: body
          description: User to reassign the ToDo to
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: boolean success
          schema:
            type: boolean
            description: boolean success or failure
        '400':
          description: Invalid id supplied
        '401':
          description: Not authorised
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
  '/v1/todo/{toDoId}/complete':
    put:
      tags:
        - todo
      description: Complete a todo
      operationId: completeToDo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: toDoId
          description: metaversalId of the ToDo
          in: path
          required: true
          type: string
      responses:
        '200':
          description: boolean success
          schema:
            type: boolean
            description: boolean success or failure
        '400':
          description: Invalid id supplied
        '401':
          description: Not authorised
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
  '/v1/todo/{toDoId}/reopen':
    put:
      tags:
        - todo
      description: Reopen a todo
      operationId: reopenToDo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: toDoId
          description: metaversalId of the ToDo
          in: path
          required: true
          type: string
      responses:
        '200':
          description: boolean success
          schema:
            type: boolean
            description: boolean success or failure
        '400':
          description: Invalid store name or id supplied
        '401':
          description: Not authorised
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
  /v1/user:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: Get current user
      operationId: getCurrentUser
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Not authorised
  '/v1/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - domino_auth: []
        - application_auth: []
          user_auth: []
  /v1/debug/toggleProfiling:
    get:
      tags:
        - debug
      summary: Toggle profiling on or off
      description: ''
      operationId: toggleProfiling
      produces:
        - application.json
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              profiling:
                type: boolean
                description: whether profiling is enabled or not
        '401':
          description: not authorized
  /v1/debug/personalStoreName:
    get:
      tags:
        - debug
      summary: Get the personal store name for the current user
      description: ''
      operationId: getPersonalStoreName
      produces:
        - application.json
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              username:
                type: string
                description: current username
              storename:
                type: string
                description: current username
        '401':
          description: not authorized
      security:
        - domino_auth: []
          debug_auth: []
        - application_auth: []
          user_auth: []
          debug_auth: []
  '/v1/debug/{store}/prepopulate':
    get:
      tags:
        - debug
      summary: Deletes all todos in the store and generates 50 random dummy entries
      description: ''
      operationId: prepopulateStore
      produces:
        - application.json
      parameters:
        - name: store
          description: store id or name in which the ToDo resides
          in: path
          required: true
          type: string
        - name: body
          in: body
          description: users to create todos on behalf of and as assignees
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              username:
                type: string
                description: current username
              storename:
                type: string
                description: current username
        '401':
          description: not authorized
      security:
        - domino_auth: []
          debug_auth: []
        - application_auth: []
          user_auth: []
          debug_auth: []
securityDefinitions:
  domino_auth:
    type: basic
  application_auth:
    type: apiKey
    in: header
    name: X-TODO-API-KEY
  user_auth:
    type: apiKey
    in: header
    name: X-TODO-USER-KEY
  debug_auth:
    type: apiKey
    in: header
    name: X-DEBUG-KEY
  sched_auth:
    type: apiKey
    in: header
    name: X-SCHED-KEY
definitions:
  Store:
    type: object
    properties:
      replicaId:
        type: string
        description: 16 character hexadecimal string corresponding to NSF's replica id
        minLength: 16
        maxLength: 16
        format: hex
        readOnly: true
      title:
        type: string
        description: >-
          Display name for store, e.g. a project name or an individual user for
          personal ToDos
      name:
        type: string
        description: >-
          File name for the NSF, appended to the folder name where all ToDo
          stored are stored
      type:
        type: string
        description: 'ToDo type, see enum'''
        enum:
          - Personal
          - Team
    required:
      - title
      - name
      - type
  ToDo:
    type: object
    properties:
      metaversalId:
        type: string
        description: >-
          MetaversalID to access this ToDo from just a Domino Session. First 16
          chars are replicaId, rest is UNID
        minLength: 48
        maxLength: 48
        format: hex
        readOnly: true
      author:
        type: string
        description: >-
          username of the person who creates the ToDo - set automatically via
          the API
        readOnly: true
      taskName:
        type: string
        description: Brief description of task
      description:
        type: string
        description: Detailed description of the task
      dueDate:
        type: string
        format: date
        description: Date when the task is due in RFC 3339 section 5.6 format 2018-03-19
      priority:
        type: string
        description: 'Priority for the ToDo, see enum'
        enum:
          - Low
          - Medium
          - High
      assignedTo:
        type: string
        description: >-
          Name of the person the ToDo is assigned to. If not set, current user
          will be used
      status:
        type: string
        description: >-
          Current status of the ToDo. Set via workflow actions, defaulting to
          New
        enum:
          - New
          - Reassigned
          - Complete
          - Overdue
        readOnly: true
    required:
      - currentUser
      - taskName
      - description
      - dueDate
      - priority
  User:
    type: object
    properties:
      username:
        type: string
        description: >-
          If Domino authentication is in operation for REST access, this
          property will be ignored for the CurrentUser. If not, the REST
          service  will use the username passed, replacing '@' with '_', append
          a computed OU, and use the server's O.
      commonName:
        type: string
        description: Username in Domino common name format
      access:
        type: object
        description: >-
          Required when setting access levels, returned when checking access
          levels, irrelevant otherwise.
        properties:
          level:
            type: string
            description: >-
              Application access level. This will be converted to Editor or
              Reader in Domino ACL
            enum:
              - Admin
              - Reader
              - Editor
              - No Access
          allowDelete:
            type: boolean
            description: Whether or not Delete documents privilege is added
