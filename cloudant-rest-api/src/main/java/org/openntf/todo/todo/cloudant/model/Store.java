/*******************************************************************************
 * Copyright 2018 Paul Withers
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package org.openntf.todo.todo.cloudant.model;

import java.io.Serializable;
import java.util.Objects;

/**
 * @author Paul Withers
 * 
 *         Store class, mostly auto-generated by Swagger
 *
 */
public class Store implements Serializable {
	private static final long serialVersionUID = 1L;
	protected String _rev = null;
	protected String _id = null;
	private String title;
	private String name;

	/**
	 * StoreType enum for Store
	 */
	public enum StoreType {
		PERSONAL("Personal"), TEAM("Team");

		private String value;

		private StoreType(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}
	}

	/**
	 * StoreType enum for Store
	 */
	public enum StoreAccess {
		READER("READER"), EDITOR("EDITOR"), ADMIN("ADMIN"), NOACCESS("NOACCESS");

		private String value;

		private StoreAccess(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}
	}

	private StoreType type = null;

	public Store() {

	}

	/**
	 * Writes database values to document in ToDo catalog
	 */
	public void serializeToCatalog() {

	}

	/**
	 * 16 character hexadecimal string corresponding to NSF&#39;s replica id
	 * 
	 * @return replicaId
	 **/
	public String getReplicaId() {
		return _id;
	}

	public Store setReplicaId(String replicaId) {
		this._id = replicaId;
		return this;
	}

	public Store title(String title) {
		this.title = title;
		return this;
	}

	/**
	 * Display name for store, e.g. a project name or an individual user for personal ToDos
	 * 
	 * @return title
	 **/
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public Store name(String name) {
		this.name = name;
		return this;
	}

	/**
	 * File name for the NSF, appended to the folder name where all ToDo stored are stored
	 * 
	 * @return name
	 **/
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Store type(StoreType type) {
		this.type = type;
		return this;
	}

	/**
	 * ToDo type, see enum&#39;
	 * 
	 * @return type
	 **/
	public StoreType getType() {
		return type;
	}

	public void setType(StoreType type) {
		this.type = type;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Store store = (Store) o;
		return Objects.equals(this._id, store._id) && Objects.equals(this.title, store.title)
				&& Objects.equals(this.name, store.name) && Objects.equals(this.type, store.type);
	}

	@Override
	public int hashCode() {
		return Objects.hash(_id, title, name, type);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Store {\n");

		sb.append("    replicaId: ").append(toIndentedString(_id)).append("\n");
		sb.append("    title: ").append(toIndentedString(title)).append("\n");
		sb.append("    name: ").append(toIndentedString(name)).append("\n");
		sb.append("    type: ").append(toIndentedString(type)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
